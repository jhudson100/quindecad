

//This file is autogenerated. Do not edit.


import Module, {Manifold, ManifoldToplevel, Mat4, Vec3} from "../ext/manifold/manifold.js";
import { ManifoldMeshWrapper, MeshHandle, manifoldMeshes } from "./workertypes.js";
let manifold: ManifoldToplevel;

export function setManifold(m: ManifoldToplevel){
    manifold=m;
}

type PyColor = [number,number,number,number?];

type cube_t = ( xsize : number,ysize : number,zsize : number,x : number,y : number,z : number,centered : boolean,color : PyColor ) => any;
declare global {
    interface WorkerGlobalScope { impl_cube : cube_t }
};

self.impl_cube = ( xsize : number,ysize : number,zsize : number,x : number,y : number,z : number,centered : boolean,color : PyColor ) => {

    let c = manifold.Manifold.cube(
        [xsize, ysize, zsize],
        centered
    );
    let c2 = c.translate([x,y,z]);
    c.delete()
    return new MeshHandle( new ManifoldMeshWrapper(c2,color) );

}
type sphere_t = ( radius : number,x : number,y : number,z : number,color : PyColor,resolution : number ) => any;
declare global {
    interface WorkerGlobalScope { impl_sphere : sphere_t }
};

self.impl_sphere = ( radius : number,x : number,y : number,z : number,color : PyColor,resolution : number ) => {

    let s = manifold.Manifold.sphere(radius, resolution);
    let s2 = s.translate([x, y,z]);
    s.delete();
    return new MeshHandle( new ManifoldMeshWrapper(s2,color) );

}
type difference_t = ( object1 : MeshHandle,object2 : MeshHandle,color : PyColor ) => any;
declare global {
    interface WorkerGlobalScope { impl_difference : difference_t }
};

self.impl_difference = ( object1 : MeshHandle,object2 : MeshHandle,color : PyColor ) => {

    let o1 = manifoldMeshes[ object1.index ];
    let o2 = manifoldMeshes[ object2.index ];
    let d = manifold.Manifold.difference(o1.mesh,o2.mesh);
    if( !color )
        color = o1.color;
    return new MeshHandle( new ManifoldMeshWrapper(d,color) );

}

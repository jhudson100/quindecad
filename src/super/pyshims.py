

# This file is autogenerated. Do not edit.


import javascript  #type: ignore
import browser  #type: ignore

#ref: Wikipedia
pi = 3.141592653589793238462643383279

_print = print

#if we send a single thing to print(),
#brython does not wrap it in a tuple as
#CPython does.
def print(*args):
    if type(args) != list and type(args) != tuple:
        args=[args]
    lst=[]
    for a in args:
        lst.append(str(a))
    tmp = ' '.join(lst)
    browser.self.impl_print(tmp)

def degrees(radians):
    return radians / 3.141592653589793238462643383279 * 180

def radians(degrees):
    return degrees/180 * 3.141592653589793238462643383279


def extrude ( polygon,height,divisions=None,twist=None,scale=None,zcenter=False,color=None ):
    if not assertIsPolygon2D(polygon):
        raise Exception('Parameter polygon has wrong type (expected 2D polygon)')
    if not assertIsPositiveNumber(height):
        raise Exception('Parameter height has wrong type (expected positive number)')
    if divisions != None and not assertIsPositiveInteger(divisions):
        raise Exception('Parameter divisions has wrong type (expected integer > 0)')
    if twist != None and not assertIsNumber(twist):
        raise Exception('Parameter twist has wrong type (expected number)')
    if scale != None and not assertIsVec2(scale):
        raise Exception('Parameter scale has wrong type (expected tuple of two numbers)')
    if zcenter != False and not assertIsBoolean(zcenter):
        raise Exception('Parameter zcenter has wrong type (expected boolean)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if polygon is None: polygon = javascript.UNDEFINED
    if height is None: height = javascript.UNDEFINED
    if divisions is None: divisions = javascript.UNDEFINED
    if twist is None: twist = javascript.UNDEFINED
    if scale is None: scale = javascript.UNDEFINED
    if zcenter is None: zcenter = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_extrude(polygon , height , divisions , twist , scale , zcenter , color)

def difference ( objects,color=None ):
    if not assertIsListOfMeshHandle(objects):
        raise Exception('Parameter objects has wrong type (expected list of drawable objects)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_difference(objects , color)

def cylinder ( x,y,z,radius,height,zcenter=True,color=None,resolution=36 ):
    if not assertIsNumber(x):
        raise Exception('Parameter x has wrong type (expected number)')
    if not assertIsNumber(y):
        raise Exception('Parameter y has wrong type (expected number)')
    if not assertIsNumber(z):
        raise Exception('Parameter z has wrong type (expected number)')
    if not assertIsPositiveNumber(radius):
        raise Exception('Parameter radius has wrong type (expected positive number)')
    if not assertIsPositiveNumber(height):
        raise Exception('Parameter height has wrong type (expected positive number)')
    if zcenter != True and not assertIsBoolean(zcenter):
        raise Exception('Parameter zcenter has wrong type (expected boolean)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if resolution != 36 and not assertIsPositiveInteger(resolution):
        raise Exception('Parameter resolution has wrong type (expected integer > 0)')
    if x is None: x = javascript.UNDEFINED
    if y is None: y = javascript.UNDEFINED
    if z is None: z = javascript.UNDEFINED
    if radius is None: radius = javascript.UNDEFINED
    if height is None: height = javascript.UNDEFINED
    if zcenter is None: zcenter = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    if resolution is None: resolution = javascript.UNDEFINED
    return browser.self.impl_cylinder(x , y , z , radius , height , zcenter , color , resolution)

def union ( objects,color=None ):
    if not assertIsListOfMeshHandle(objects):
        raise Exception('Parameter objects has wrong type (expected list of drawable objects)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_union(objects , color)

def frustum ( radius1,radius2,height,x=0.0,y=0.0,z=0.0,zcenter=True,color=None,resolution=36 ):
    if not assertIsPositiveNumber(radius1):
        raise Exception('Parameter radius1 has wrong type (expected positive number)')
    if not assertIsPositiveNumber(radius2):
        raise Exception('Parameter radius2 has wrong type (expected positive number)')
    if not assertIsPositiveNumber(height):
        raise Exception('Parameter height has wrong type (expected positive number)')
    if x != 0.0 and not assertIsNumber(x):
        raise Exception('Parameter x has wrong type (expected number)')
    if y != 0.0 and not assertIsNumber(y):
        raise Exception('Parameter y has wrong type (expected number)')
    if z != 0.0 and not assertIsNumber(z):
        raise Exception('Parameter z has wrong type (expected number)')
    if zcenter != True and not assertIsBoolean(zcenter):
        raise Exception('Parameter zcenter has wrong type (expected boolean)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if resolution != 36 and not assertIsPositiveInteger(resolution):
        raise Exception('Parameter resolution has wrong type (expected integer > 0)')
    if radius1 is None: radius1 = javascript.UNDEFINED
    if radius2 is None: radius2 = javascript.UNDEFINED
    if height is None: height = javascript.UNDEFINED
    if x is None: x = javascript.UNDEFINED
    if y is None: y = javascript.UNDEFINED
    if z is None: z = javascript.UNDEFINED
    if zcenter is None: zcenter = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    if resolution is None: resolution = javascript.UNDEFINED
    return browser.self.impl_frustum(radius1 , radius2 , height , x , y , z , zcenter , color , resolution)

def scale ( objects,sx,sy,sz,centroid=None,color=None ):
    if not any([assertIsMeshHandle(objects),assertIsListOfMeshHandle(objects)]):
        raise Exception('Parameter objects has wrong type (expected drawable object, or list of drawable objects)')
    if not assertIsNumber(sx):
        raise Exception('Parameter sx has wrong type (expected number)')
    if not assertIsNumber(sy):
        raise Exception('Parameter sy has wrong type (expected number)')
    if not assertIsNumber(sz):
        raise Exception('Parameter sz has wrong type (expected number)')
    if centroid != None and not assertIsVec3(centroid):
        raise Exception('Parameter centroid has wrong type (expected tuple of three numbers)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if sx is None: sx = javascript.UNDEFINED
    if sy is None: sy = javascript.UNDEFINED
    if sz is None: sz = javascript.UNDEFINED
    if centroid is None: centroid = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_scale(objects , sx , sy , sz , centroid , color)

def sphere ( radius,x=0.0,y=0.0,z=0.0,color=None,resolution=48 ):
    if not assertIsPositiveNumber(radius):
        raise Exception('Parameter radius has wrong type (expected positive number)')
    if x != 0.0 and not assertIsNumber(x):
        raise Exception('Parameter x has wrong type (expected number)')
    if y != 0.0 and not assertIsNumber(y):
        raise Exception('Parameter y has wrong type (expected number)')
    if z != 0.0 and not assertIsNumber(z):
        raise Exception('Parameter z has wrong type (expected number)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if resolution != 48 and not assertIsPositiveInteger(resolution):
        raise Exception('Parameter resolution has wrong type (expected integer > 0)')
    if radius is None: radius = javascript.UNDEFINED
    if x is None: x = javascript.UNDEFINED
    if y is None: y = javascript.UNDEFINED
    if z is None: z = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    if resolution is None: resolution = javascript.UNDEFINED
    return browser.self.impl_sphere(radius , x , y , z , color , resolution)

def draw ( objs ):
    if not any([assertIsMeshHandle(objs),assertIsListOfMeshHandle(objs)]):
        raise Exception('Parameter objs has wrong type (expected drawable object, or list of drawable objects)')
    def drawHelper(obj, parameterNumber):
        if type(obj) == list or type(obj) == tuple:
            for x in obj:
                drawHelper(x,parameterNumber)
        else:
            if not assertIsMeshHandle(obj):
                raise Exception(f"draw(): Parameter {parameterNumber+1} is not a drawable object or contains something that is not a drawable object")
            browser.self.impl_draw(obj)

    if type(objs) != tuple and type(objs) != list:
        objs = [objs]
    for i in range(len(objs)):
        drawHelper(objs[i],i)

def intersection ( objects,color=None ):
    if not assertIsListOfMeshHandle(objects):
        raise Exception('Parameter objects has wrong type (expected list of drawable objects)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_intersection(objects , color)

def cut ( object,planeNormal,planeD,keepPositive,color=None ):
    if not assertIsMeshHandle(object):
        raise Exception('Parameter object has wrong type (expected drawable object)')
    if not assertIsVec3(planeNormal):
        raise Exception('Parameter planeNormal has wrong type (expected tuple of three numbers)')
    if not assertIsNumber(planeD):
        raise Exception('Parameter planeD has wrong type (expected number)')
    if not assertIsBoolean(keepPositive):
        raise Exception('Parameter keepPositive has wrong type (expected boolean)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if object is None: object = javascript.UNDEFINED
    if planeNormal is None: planeNormal = javascript.UNDEFINED
    if planeD is None: planeD = javascript.UNDEFINED
    if keepPositive is None: keepPositive = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_cut(object , planeNormal , planeD , keepPositive , color)

def revolve ( polygon,angle=None,color=None,resolution=36 ):
    if not assertIsPolygon2D(polygon):
        raise Exception('Parameter polygon has wrong type (expected 2D polygon)')
    if angle != None and not assertIsNumber(angle):
        raise Exception('Parameter angle has wrong type (expected number)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if resolution != 36 and not assertIsPositiveInteger(resolution):
        raise Exception('Parameter resolution has wrong type (expected integer > 0)')
    if polygon is None: polygon = javascript.UNDEFINED
    if angle is None: angle = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    if resolution is None: resolution = javascript.UNDEFINED
    return browser.self.impl_revolve(polygon , angle , color , resolution)

def translate ( objects,tx,ty,tz,color=None ):
    if not any([assertIsMeshHandle(objects),assertIsListOfMeshHandle(objects)]):
        raise Exception('Parameter objects has wrong type (expected drawable object, or list of drawable objects)')
    if not assertIsNumber(tx):
        raise Exception('Parameter tx has wrong type (expected number)')
    if not assertIsNumber(ty):
        raise Exception('Parameter ty has wrong type (expected number)')
    if not assertIsNumber(tz):
        raise Exception('Parameter tz has wrong type (expected number)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if tx is None: tx = javascript.UNDEFINED
    if ty is None: ty = javascript.UNDEFINED
    if tz is None: tz = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_translate(objects , tx , ty , tz , color)

def box ( min,max,color=None ):
    if not assertIsVec3(min):
        raise Exception('Parameter min has wrong type (expected tuple of three numbers)')
    if not assertIsVec3(max):
        raise Exception('Parameter max has wrong type (expected tuple of three numbers)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if min is None: min = javascript.UNDEFINED
    if max is None: max = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_box(min , max , color)

def free ( obj ):
    if not assertIsMeshHandle(obj):
        raise Exception('Parameter obj has wrong type (expected drawable object)')
    if obj is None: obj = javascript.UNDEFINED
    return browser.self.impl_free(obj)

def assertIsBoolean ( x ):
    return (x == True or x == False)

def assertIsByte ( x ):
    return assertIsNumber(x) and x >= 0 and x <= 255

def assertIsColor ( x ):
    if type(x) != list and type(x) != tuple:
        return False
    if len(x) != 3 and len(x) != 4:
        return False
    return all( [ assertIsByte(q) for q in x] )

def assertIsListOfMeshHandle ( obj ):
    if type(obj) != tuple and type(obj) != list:
        return False
    if len(obj) == 0:
        return False
    return all( [ assertIsMeshHandle(q) for q in obj ] )

def assertIsListOfVec3 ( obj ):
    if type(obj) != tuple and type(obj) != list:
        return False
    if len(obj) == 0:
        return False
    return all( [assertIsVec3(q) for q in obj] )

def assertIsMeshHandle ( obj ):
    try:
        tmp = obj.to_dict()
        if tmp.get("_is_drawable_") != True:
            return False
        return True
    except Exception as e:
        return False

def assertIsNonnegativeInteger ( obj ):
    return type(obj) == int and obj >= 0

def assertIsNonnegativeNumber ( x ):
    return assertIsNumber(x) and x >= 0

def assertIsNonzeroVec3 ( obj ):
    if type(obj) != tuple and type(obj) != list:
        return False
    if len(obj) != 3:
        return False
    if not all( [ assertIsNumber(q) for q in obj] ):
        return False
    if obj[0]*obj[0] + obj[1]*obj[1] + obj[2]*obj[2] < 0.001:
        return False
    return True

def assertIsNumber ( x ):
    return type(x) == int or type(x) == float

def assertIsPolygon2D ( obj ):
    if type(obj) != tuple and type(obj) != list:
        return False
    if len(obj) < 3:
        return False
    return all( [ assertIsVec2(q) for q in obj] )

def assertIsPositiveInteger ( obj ):
    return type(obj) == int and obj > 0

def assertIsPositiveNumber ( x ):
    return assertIsNumber(x) and x > 0

def assertIsVec2 ( obj ):
    if type(obj) != tuple and type(obj) != list:
        return False
    if len(obj) != 2:
        return False
    return all( [ assertIsNumber(q) for q in obj] )

def assertIsVec3 ( obj ):
    if type(obj) != tuple and type(obj) != list:
        return False
    if len(obj) != 3:
        return False
    return all( [ assertIsNumber(q) for q in obj] )

def rotate ( objects,axis,angle,centroid=None,color=None ):
    if not any([assertIsMeshHandle(objects),assertIsListOfMeshHandle(objects)]):
        raise Exception('Parameter objects has wrong type (expected drawable object, or list of drawable objects)')
    if not assertIsNonzeroVec3(axis):
        raise Exception('Parameter axis has wrong type (expected tuple of three numbers with x**2 + y**2 + z**2 > 0)')
    if not assertIsNumber(angle):
        raise Exception('Parameter angle has wrong type (expected number)')
    if centroid != None and not assertIsVec3(centroid):
        raise Exception('Parameter centroid has wrong type (expected tuple of three numbers)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if axis is None: axis = javascript.UNDEFINED
    if angle is None: angle = javascript.UNDEFINED
    if centroid is None: centroid = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_rotate(objects , axis , angle , centroid , color)

def cube ( xsize,ysize,zsize,x=0.0,y=0.0,z=0.0,centered=False,color=None ):
    if not assertIsPositiveNumber(xsize):
        raise Exception('Parameter xsize has wrong type (expected positive number)')
    if not assertIsPositiveNumber(ysize):
        raise Exception('Parameter ysize has wrong type (expected positive number)')
    if not assertIsPositiveNumber(zsize):
        raise Exception('Parameter zsize has wrong type (expected positive number)')
    if x != 0.0 and not assertIsNumber(x):
        raise Exception('Parameter x has wrong type (expected number)')
    if y != 0.0 and not assertIsNumber(y):
        raise Exception('Parameter y has wrong type (expected number)')
    if z != 0.0 and not assertIsNumber(z):
        raise Exception('Parameter z has wrong type (expected number)')
    if centered != False and not assertIsBoolean(centered):
        raise Exception('Parameter centered has wrong type (expected boolean)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if xsize is None: xsize = javascript.UNDEFINED
    if ysize is None: ysize = javascript.UNDEFINED
    if zsize is None: zsize = javascript.UNDEFINED
    if x is None: x = javascript.UNDEFINED
    if y is None: y = javascript.UNDEFINED
    if z is None: z = javascript.UNDEFINED
    if centered is None: centered = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_cube(xsize , ysize , zsize , x , y , z , centered , color)

def hull ( objects,color=None ):
    if not any([assertIsMeshHandle(objects),assertIsListOfMeshHandle(objects)]):
        raise Exception('Parameter objects has wrong type (expected drawable object, or list of drawable objects)')
    if color != None and not assertIsColor(color):
        raise Exception('Parameter color has wrong type (expected color)')
    if objects is None: objects = javascript.UNDEFINED
    if color is None: color = javascript.UNDEFINED
    return browser.self.impl_hull(objects , color)

def boundingbox ( objects ):
    if not any([assertIsMeshHandle(objects),assertIsListOfMeshHandle(objects)]):
        raise Exception('Parameter objects has wrong type (expected drawable object, or list of drawable objects)')
    if objects is None: objects = javascript.UNDEFINED
    return browser.self.impl_boundingbox(objects)

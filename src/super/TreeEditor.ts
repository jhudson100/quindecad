
declare var $:any;

interface NodeState{
    opened: boolean;
    disabled: boolean;
    selected: boolean;
}

interface Coordinate{
    x: number;
    y: number;
};
interface ContextItemEntry{
    separator_before?:boolean;
    separator_after?:boolean;
    _disabled?:boolean;
    label:string;
    title?:string;      //tooltip
    action: ContextItemChosenCallback;
    icon?: string;   //if it contains '/': path to icon. Else, css class name
    shortcut?: number;  //keyCode for the action. Ex from jstree docs: F2=113
    shortcut_label?: string;
    submenu?: ContextItemsDict;
};
interface ContextItemChosenData {
    item: ContextItemEntry; //from original item definition
    reference: HTMLElement; //DOM node for the tree node
    element: HTMLElement;   //DOM element for the context menu
    position: Coordinate;   //where the menu is
};

type ContextItemsDict = {[name: string] : ContextItemEntry} ;  //Record<string,ContextItemEntry>;
type ContextItemsCallback = (items: ContextItemsDict) => void;
type ContextItemChosenCallback = ( data:ContextItemChosenData ) => void;

class TreeNode{
    id: string;                 //autogenerated if not present
    text: string;               
    icon: string|boolean;       //If icon contains /: Interpreted as path to image
                                //if false: No icon.
                                //else, interpreted as css class to apply to an <i> element
    state: NodeState;
    children: TreeNode[] = [];
    li_attr: any;               //attributes for the generated li node
    a_attr: any;                 //attributes for the generated a node
    type: string;              //for type jstree plugin

    constructor(text:string, type: string){
        this.text=text;
        this.state = { 
            opened: true,
            disabled: false,
            selected: false
        };
        this.type=type;
    }
    appendChild(n: TreeNode){
        this.children.push(n);
    }
}


export class TreeEditor{

    parent: HTMLElement;

    constructor(container: HTMLElement){
        this.parent=container;

        let scroller = document.createElement("div");
        scroller.style.overflow="scroll";
        scroller.style.height="100%";
        container.appendChild(scroller);

        let r = new TreeNode("difference","difference");
        let c1 = new TreeNode("pcbbase","box");
        let c2 = new TreeNode("holes","union");
        let g1 = new TreeNode("hole1cutter","cylinder");
        let g2 = new TreeNode("hole2cutter","cylinder");
        let g3 = new TreeNode( "intersection","intersection");
        let gg1 = new TreeNode("cylinder","cylinder");
        let gg2 = new TreeNode("sphere","sphere");
        let gg3 = new TreeNode("script","python");

        r.appendChild(c1);
        r.appendChild(c2);
        c2.appendChild(g1);
        c2.appendChild(g2);
        c2.appendChild(g3);
        g3.appendChild(gg1);
        g3.appendChild(gg2);
        g3.appendChild(gg3);

        let div = document.createElement("div");
        scroller.appendChild(div);
        $(div).jstree({
            core: {
                data: [r],
                animation: 100,       //default=200
                multiple: false,        //multi-selection
                dblclick_toggle:false,  //allow double click to open/close nodes
                check_callback: ()=>{ 
                    // console.log("CC");
                    return true;
                },
                themes:{
                    dots: true,
                    icons: true
                }
            },

            plugins: [
                "dnd","types",
                "wholerow",         //wholerow overrides the dots option
                "contextmenu",
                // "checkbox",
            ],
            // checkbox:{
            //     visible:true,
            //     whole_node:false,
            // },
            dnd:{
                is_draggable: (n:any) => {
                    console.log("Is draggable?");
                    return true;
                },
                large_drop_target: true,
                blank_space_drop:  true
            },
            contextmenu: {
                select_node: true,  //select node when right clicked
                show_at_node: true, //align menu with node (true) or mouse (false)
                items: (n: any, callback: ContextItemsCallback) => {
                    let I:ContextItemsDict={};
                    I["foo"] = {
                        label:"fooby",
                        action: (selection: ContextItemChosenData) => {
                            console.log("SELECTION 1",selection);
                        }
                    };
                    I["bar"] = {
                        label:"barroom!",
                        action: (selection: ContextItemChosenData) => {
                            console.log("SELECTION 2",selection);
                        }
                    };
                    I["baz"] = {
                        label:"Add child...",
                        submenu : {
                            cylinder: {
                                label:"Cylinder",
                                action: ()=>{}
                            },
                            sphere: {
                                label: "Sphere",
                                action: ()=>{}
                            },
                            boolean: {
                                label: "Boolean...",
                                action: ()=>{},
                                submenu: {
                                    union: {
                                        label: "Union",
                                        action: ()=>{}
                                    },
                                    intersection: {
                                        label: "Intersection",
                                        action: ()=>{}
                                    },
                                    difference: {
                                        label: "Difference",
                                        action: ()=>{}
                                    }
                                }
                            },
                        },
                        action: (selection: ContextItemChosenData) => {
                            console.log("SELECTION 3",selection);
                        }
                    };
                    callback(I);
                }
            },
            types:{
                cylinder:{
                    icon: "./cylinder.svg"
                },
                box: {
                    icon: "./box.svg"
                },
                sphere: {
                    icon: "./sphere.svg"
                },
                union: {
                    icon: "./union.svg"
                },
                intersection:{
                    icon: "./intersection.svg"
                },
                difference: {
                    icon: "./difference.svg"
                },
                python: {
                    icon: "./ext/pythonlogo/python-logo-small.svg"
                }
            }


        });
    }
}



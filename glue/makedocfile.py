#!/usr/bin/env python3

#make the Python glue between the user's Python code and the JS implementation.
#Also make the JS implementations.

import enum
import typing
import inspect
import sys
import re
import os
import os.path
import types
import importlib


def makeDocFile(shimfiles):

    docfile = "src/super/pyshimdoc.ts"

    with open(docfile,"w") as fp:

        print(file=fp)
        print(file=fp)
        print("//This file is autogenerated. Do not edit.",file=fp)
        print(file=fp)
        print(file=fp)

        with open("preambles/pyshimdoc.ts") as fp2:
            preamble=fp2.read()

        print(preamble, file=fp)

        print("let preambleFunctions: FuncSpec[] = [",file=fp)

        for mod,funcs in shimfiles:
            assert len(funcs) == 1
            name,func = funcs[0]
            outputDoc(name=name,fp=fp,func=func)

        print("] //end preambleFunctions list",file=fp)

def outputDoc(name,fp,func):

    sig = inspect.signature(func)
    src = inspect.getsource(func)

    #get docstring. We assume they're always
    #delimited with triple " quotes
    i1 = src.find('"""')
    if i1 == -1:
        assert 0
    else:
        i2 = src.find('"""',i1+1)

    doc = src[i1+3:i2]
    lst = doc.split("@param")

    functionDoc = lst[0].strip()

    pdocs={}
    for tmp in lst[1:]:
        tmp=tmp.strip()
        i = tmp.find(" ")
        assert i != -1
        pname = tmp[:i].strip()
        pdocs[pname] = tmp[i:].strip()

    print("    {",file=fp)
    print(f"    name: '{name}',",file=fp)
    print(f"    doc: '{functionDoc}', ",file=fp)
    print(f"    args: [",file=fp)
    for pname in sig.parameters:
        pinfo = sig.parameters[pname]
        anno = pinfo.annotation
        if pname in pdocs:
            doc = pdocs[pname]
        else:
            doc=""
            print("Warning: No documentation for parameter",pname,"of",name)
        defval = pinfo.default
        if defval == inspect.Parameter.empty:
            defval = "undefined"
        else:
            defval = f'"{defval}"'

        if typing.get_origin(anno) is types.UnionType:
            tmp=[]
            for underlyingType in anno.__args__:
                tmp.append( f"ArgType.{underlyingType.__name__}" )
            atype = "[" + ",".join(tmp) + "]"
        else:
            atype = f"[ArgType.{anno.__name__}]"

        print(f'        {{ argname: "{pname}", argtype: {atype}, defaultValue: {defval}, doc: "{doc}" }},',file=fp)
    print("    ]",file=fp)
    print("    },",file=fp)
